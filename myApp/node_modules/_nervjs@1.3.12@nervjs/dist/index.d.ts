// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../../../../packages/nerv/nerv-utils
//   ../../../../packages/nerv/nerv-shared

declare module 'nervjs' {
    import Component from 'nervjs/component';
    import PureComponent from 'nervjs/pure-component';
    import { render } from 'nervjs/render';
    import createElement from 'nervjs/create-element';
    import cloneElement from 'nervjs/clone-element';
    import { nextTick } from 'nerv-utils';
    import { Children } from 'nervjs/children';
    import { hydrate } from 'nervjs/hydrate';
    import options from 'nervjs/options';
    import { createPortal } from 'nervjs/vdom/create-portal';
    import { version } from 'nervjs/version';
    import { unmountComponentAtNode, findDOMNode, unstable_renderSubtreeIntoContainer, createFactory, unstable_batchedUpdates, isValidElement } from 'nervjs/dom';
    import { PropTypes } from 'nervjs/prop-types';
    export { Children, Component, PureComponent, createElement, cloneElement, render, nextTick, options, findDOMNode, isValidElement, unmountComponentAtNode, createPortal, unstable_renderSubtreeIntoContainer, hydrate, createFactory, unstable_batchedUpdates, version, PropTypes };
    const _default: any;
    export default _default;
}

declare module 'nervjs/component' {
    import { Props, ComponentLifecycle, Refs } from 'nerv-shared';
    interface Component<P = {}, S = {}> extends ComponentLifecycle<P, S> {
        _rendered: any;
        dom: any;
    }
    class Component<P, S> implements ComponentLifecycle<P, S> {
        static defaultProps: {};
        state: Readonly<S>;
        props: Readonly<P> & Readonly<Props>;
        context: any;
        _dirty: boolean;
        _disable: boolean;
        _pendingStates: any[];
        _pendingCallbacks: Function[];
        refs: Refs;
        isReactComponent: Object;
        constructor(props?: P, context?: any);
        setState<K extends keyof S>(state: ((prevState: Readonly<S>, props: P) => Pick<S, K> | S) | (Pick<S, K> | S), callback?: () => void): void;
        getState(): {};
        clearCallBacks(): void;
        forceUpdate(callback?: Function): void;
        render(nextProps?: P, nextState?: any, nextContext?: any): any;
    }
    export default Component;
}

declare module 'nervjs/pure-component' {
    import Component from 'nervjs/component';
    class PureComponent<P, S> extends Component<P, S> {
        isPureComponent: boolean;
        shouldComponentUpdate(nextProps: P, nextState: S): boolean;
    }
    export default PureComponent;
}

declare module 'nervjs/render' {
    import { VirtualNode } from 'nerv-shared';
    export function render(vnode: VirtualNode, container: Element, callback?: Function): any;
}

declare module 'nervjs/create-element' {
    import FullComponent from 'nervjs/full-component';
    import StatelessComponent from 'nervjs/stateless-component';
    import { Props, Component, VNode, VirtualChildren } from 'nerv-shared';
    function createElement<T>(type: string | Function | Component<any, any>, properties?: T & Props | null, ..._children: Array<VirtualChildren | null>): VNode | Component<any, any> | StatelessComponent | FullComponent;
    export default createElement;
}

declare module 'nervjs/clone-element' {
    export default function cloneElement(vnode: any, props?: object, ...children: any[]): any;
}

declare module 'nervjs/children' {
    import { VirtualChildren } from 'nerv-shared';
    export type IterateFn = (value: VirtualChildren | any, index: number, array: Array<VirtualChildren | any>) => any;
    export const Children: {
        map(children: any[], fn: IterateFn, ctx: any): any[];
        forEach(children: any[], fn: IterateFn, ctx: any): void;
        count(children: any[]): number;
        only(children: any[]): any;
        toArray(children: any[]): any[];
    };
}

declare module 'nervjs/hydrate' {
    export function hydrate(vnode: any, container: Element, callback?: Function): any;
}

declare module 'nervjs/options' {
    import { CompositeComponent, StatelessComponent, VirtualNode } from 'nerv-shared';
    export type optionsHook = (vnode: CompositeComponent | StatelessComponent) => void;
    const options: {
        afterMount: optionsHook;
        afterUpdate: optionsHook;
        beforeUnmount: optionsHook;
        roots: VirtualNode[];
        debug: boolean;
    };
    export default options;
}

declare module 'nervjs/vdom/create-portal' {
    import { VirtualNode, Portal } from 'nerv-shared';
    export function createPortal(children: VirtualNode, container: Element): Portal;
}

declare module 'nervjs/version' {
    export const version = "15.4.2";
}

declare module 'nervjs/dom' {
    export function unmountComponentAtNode(dom: any): boolean;
    export function findDOMNode(component: any): any;
    export function createFactory(type: any): any;
    export function unstable_renderSubtreeIntoContainer(parentComponent: any, vnode: any, container: any, callback: any): any;
    export function isValidElement(element: any): boolean;
    export const unstable_batchedUpdates: (fn: any, ...args: any[]) => void;
}

declare module 'nervjs/prop-types' {
    const PropTypes: {
        array: any;
        bool: any;
        func: any;
        number: any;
        object: any;
        string: any;
        any: any;
        arrayOf: () => any;
        element: any;
        instanceOf: () => any;
        node: any;
        objectOf: () => any;
        oneOf: () => any;
        oneOfType: () => any;
        shape: () => any;
        exact: () => any;
        PropTypes: {};
        checkPropTypes: () => void;
    };
    export { PropTypes };
}

declare module 'nervjs/full-component' {
    import { VType, Component, CompositeComponent, Ref } from 'nerv-shared';
    class ComponentWrapper implements CompositeComponent {
        vtype: VType;
        type: any;
        name: string;
        _owner: any;
        props: any;
        component: Component<any, any>;
        context: any;
        key: any;
        dom: Element | null;
        _rendered: any;
        ref: Ref;
        constructor(type: any, props: any);
        init(parentContext: any, parentComponent: any): Element;
        update(previous: any, current: any, parentContext: any, domNode?: any): any;
        destroy(): void;
    }
    export default ComponentWrapper;
}

declare module 'nervjs/stateless-component' {
    import { VType } from 'nerv-shared';
    class StateLessComponent {
        vtype: VType;
        type: Function;
        name: string;
        _owner: any;
        props: any;
        _rendered: any;
        key: any;
        dom: Element | null;
        constructor(type: any, props: any);
        init(parentContext: any): Element;
        update(previous: any, current: any, parentContext: any): any;
        destroy(): void;
    }
    export default StateLessComponent;
}

